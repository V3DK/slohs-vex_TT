/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       VEX                                                       */
/*    Created:      Thu Sep 26 2019                                           */
/*    Description:  Competition Template                                      */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "vex.h"

using namespace vex;

// A global instance of competition
competition Competition;

// define your global instances of motors and other devices here
//drive
  vex::motor frontLeft = vex::motor(vex::PORT11, vex::gearSetting::ratio18_1);
  vex::motor backLeft = vex::motor(vex::PORT8, vex::gearSetting::ratio18_1);
  vex::motor frontRight = vex::motor(vex::PORT1, vex::gearSetting::ratio18_1, true);
  vex::motor backRight = vex::motor(vex::PORT7, vex::gearSetting::ratio18_1, true);
  //other
  vex::motor leftRoller = vex::motor(vex::PORT20, vex::gearSetting::ratio6_1);
  vex::motor rightRoller = vex::motor(vex::PORT19, vex::gearSetting::ratio36_1);
  vex::motor angler = vex::motor(vex::PORT5, vex::gearSetting::ratio18_1);
  vex::motor lift = vex::motor(vex::PORT6, vex::gearSetting::ratio18_1);
  //controller
  vex::controller Controller1 = vex::controller();

int autoPos = 1;
  int autoMax = 4;

  // variables
  int maxSpeed = 100;

    //autonomous variables
  bool redSide = true;
  float math_Pi = 3.1415926535897932384626433;
  bool autoRunning = false;

  //drive bools
  bool driveLockOn = false;
  bool straightMove = false;
  double driveFrac = 1;

  //lift vars
  bool liftTrigger = false;
  int liftPos = 0;

  double rollerFrac = 1;

  //angler
  bool anglerOut = false;

  //PID
  bool pidRunning = false;
  bool turnRunning;
  float pidReqValue = 0; 
  float tReq = 0;
  //PID Speeds
  int pidSpeed = 0;
  int tSpeed = 0;
  //drive constants
  float  kp = 0.3;
  //float  ki = 0.0;
  float  kd = 0.3;
  //turn constants
  float tKp = 0.9;
  float tKd = 3.5;
  bool pidSlew = false;


float leftAvg(){
    //avg the 2 values
    return ((frontLeft.rotation(vex::rotationUnits::deg) + 
            backLeft.rotation(vex::rotationUnits::deg)) / 2);
}


//return the avg value of left encoders
float rightAvg(){
    //avg the 2 values
    return ((frontRight.rotation(vex::rotationUnits::deg) + 
            backRight.rotation(vex::rotationUnits::deg)) / 2);
}

void moveRight(int rVel){
    frontRight.spin(vex::directionType::fwd, rVel, vex::velocityUnits::pct);
    backRight.spin(vex::directionType::fwd, rVel, vex::velocityUnits::pct);
}

void moveLeft(int lVel){
    frontLeft.spin(vex::directionType::fwd, lVel, vex::velocityUnits::pct);
    backLeft.spin(vex::directionType::fwd, lVel, vex::velocityUnits::pct);
}

void resetDrive(){
    moveLeft(0);
    moveRight(0);
    frontLeft.resetRotation();
    backLeft.resetRotation();
    frontRight.resetRotation();
    backRight.resetRotation();
}

void resetOthers(){
    lift.resetRotation();
    rightRoller.resetRotation();
    leftRoller.resetRotation();
    angler.resetRotation();
}

//isDriving
int count = 0;
float last = 0;
//everything in absolute value
bool isDriving(float tar){
  Brain.Screen.clearScreen();

  int lPos = leftAvg();
  int rPos = rightAvg();

  //always positive
  float curr = (abs(lPos) + abs(rPos))/2;
  int thresh = 3;
  int target = abs(tar);

  Brain.Screen.printAt(1, 10, "%d", target);
  Brain.Screen.printAt(1, 30, "%d", count);
  Brain.Screen.printAt(1, 70, "%0.4f", curr);
  Brain.Screen.printAt(1, 90, "%0.4f", last);
  Brain.Screen.printAt(1, 130, "%0.4f", abs(last - curr));

  if((abs(last - curr) < thresh) && ((target * 0.7) < curr))
    count++;
  else
    count = 0;

  last = curr;

  //not driving if we haven't moved
  if(count > 4){
    return false;
    count = 0;
    last = 0;
  }
  else
    return true;
}

//slew rate
int accel_step = 4;
int deccel_step = 256; // no decel slew
int lSpeed = 0;
int rSpeed = 0;

void leftSlew(int leftTarget){
  int step;

  if(abs(lSpeed) < abs(leftTarget))
    step = accel_step;
  else
    step = deccel_step;

  if(leftTarget > lSpeed + step)
    lSpeed += step;
  else if(leftTarget < lSpeed - step)
    lSpeed -= step;
  else
    lSpeed = leftTarget;

  moveLeft(lSpeed);
}

//slew control
void rightSlew(int rightTarget){
  int step;

  if(abs(rSpeed) < abs(rightTarget))
    step = accel_step;
  else
    step = deccel_step;

  if(rightTarget > rSpeed + step)
    rSpeed += step;
  else if(rightTarget < rSpeed - step)
    rSpeed -= step;
  else
    rSpeed = rightTarget;

  moveRight(rSpeed);
}

//stop the pid part from running and reset values passed
//works for normal and turning PID
 void stopPid(){
    pidRunning = false;
    //turnRunning = false;
    
    //redundant safeties
    pidReqValue = 0;
    pidSpeed = 0;

    moveLeft(0);
    moveRight(0);
    //tReq = 0;
    //tSpeed = 0;
 }
 int tDrive = 0;

 void stopTurn(){
    turnRunning = false;

    tReq = 0;
    tSpeed = 0;
    tDrive = 0;

    moveLeft(0);
    moveRight(0);
 }

 void startPid(float pReq, int pSpeed, bool pidS){ //pReq in inches
    resetDrive();
    pidReqValue = (pReq / (4 * math_Pi)) * 360;
    pidSpeed = pSpeed;
    pidRunning = true;
    pidSlew = pidS;
    //wait until pidRunning is false
    while(pidRunning){
        vex::task::sleep(20);
    }
    //Brain.Screen.printAt(1, 115, "Done!");
 }

//positive tReq = right turn!
 void startTurn(float tReqVal, int turSpeed){
    resetDrive();
    tReq = (tReqVal / (4 * math_Pi)) * 360;    
    tSpeed = turSpeed;
    turnRunning = true;
    
    //wait until pidRunning is false
    while(turnRunning){
        vex::task::sleep(20);
    }
 }

int pidTask(){
    //normal
    float  pidCurrValue;
    int    pidError;
    float  pidLastError;
    float  pidDerivative;
    int    pidDrive;

    //clearEncoders
    resetDrive();

    pidLastError = 0;
     while(true){

        if(pidRunning){
            //Brain.Screen.clearScreen();

            //read sensor value from Avg func
            pidCurrValue = (rightAvg() + leftAvg()) / 2;
            pidError = pidReqValue - pidCurrValue;

            pidDerivative = pidError - pidLastError;
            pidLastError = pidError;

            pidDrive = (kp * pidError) + (kd * pidDerivative);
            //limit drive - speed based on pidSpeed variable passed in
            if(pidDrive > pidSpeed)
                pidDrive = pidSpeed;
            else if(pidDrive < (-pidSpeed))
                pidDrive = (-pidSpeed);

            //stoppping state - if drive power super small, (less than 3) and error is equal to last error, robot is stopped
            if(!isDriving(pidReqValue)){
               Brain.Screen.printAt(1, 10, "First");
                stopPid();
            }    
            //send to drive motors - values already scaled to speed
            if(pidSlew){
              rightSlew(pidDrive);
              leftSlew(pidDrive);
            }
            else if(!pidSlew){
              moveLeft(pidDrive);
              moveRight(pidDrive);
            }   
        }
        //pid not running
        else {
            // clear all
            pidError       = 0;
            pidLastError   = 0;
            pidDerivative  = 0;
            pidReqValue    = 0;
            pidSpeed       = 0;
        }

            //to not waste resources
            vex::task::sleep(25);
        }
        return 0;
}

int turnTask(){
    //turning
    float  tCurr = 0;
    int    tError = 0;
    float  tLastError = 0;
    float  tDeriv = 0;

    //clearEncoders
    resetDrive();

     while(true){
        //turning pid
        if(turnRunning){

            //guarentees correct sign - right turn is pos, left is neg
            tCurr = (leftAvg() - rightAvg()) / 2;
            //tCurr = leftAvg();
            tError = tReq - tCurr;

            tDeriv = tError - tLastError;
            tLastError = tError;

            tDrive = (tKp * tError) + (tKd * tDeriv);
            //limit drive - speed based on pidSpeed variable passed in
            if(tDrive > tSpeed)
                tDrive = tSpeed;
            else if(tDrive < (-tSpeed))
                tDrive = (-tSpeed);

          /*  Brain.Screen.printAt(1, 10, "%d", tError);
            Brain.Screen.printAt(1, 30, "%d", tLastError);
            Brain.Screen.printAt(1, 50, "%d", tDrive);
            Brain.Screen.printAt(1, 70, "%0.4f", tReq);
          */

           // Brain.Screen.printAt(1, 10, "First");

            //stoppping state - if drive power super small, (less than 3) and error is equal to last error, robot is stopped
            if(!isDriving(tReq)){
              tDrive = 0;
                stopTurn();
            }        

           // Brain.Screen.printAt(1, 120, "Third");
            //send to drive motors
            moveLeft(tDrive);
            moveRight(-tDrive);

            //leftSlew(tDrive);
            //rightSlew(-tDrive);
        }

        //pid not running
        else {
            tError = 0;
            tLastError = 0;
            tDeriv = 0;
            tReq = 0;
            tSpeed = 0;
        }
            //to not waste resources
            vex::task::sleep(25);
        }
        return 0;
}

void pre_auton(void) {
  // Initializing Robot Configuration. DO NOT REMOVE!
  vexcodeInit();

    //reset drive encoders
    resetDrive();
    //reset all other encoders
    resetOthers();
    Brain.Screen.clearScreen();
    Brain.Screen.printAt(1, 15, "Ready!");
}

void driveCoast(){
      frontLeft.stop(vex::brakeType::coast);
      backLeft.stop(vex::brakeType::coast);
      backRight.stop(vex::brakeType::coast);
      frontRight.stop(vex::brakeType::coast);

    }
    void driveHold(){
      frontLeft.stop(vex::brakeType::hold);
      backLeft.stop(vex::brakeType::hold);
      backRight.stop(vex::brakeType::hold);
      frontRight.stop(vex::brakeType::hold);
    }
    
    //function to toggle lock and coast with boolean
    void driveLock(bool z){
        // if z is true, lock is turned on
        // else, it's turned off
        if(z){
            driveHold(); 
        }
        else if(!z) {
            driveCoast();
        }
    }

    //d in inches
    //s speed - in pct out of %100
    void driveMoveFor(float d, int s){
        resetDrive();
        driveLock(false);
        //calculate distance from inches to revolutions
        float revo = d / (4 * math_Pi);
        frontLeft.rotateFor(revo, vex::rotationUnits::rev, s, vex::velocityUnits::pct, false);
        frontRight.rotateFor(revo, vex::rotationUnits::rev, s, vex::velocityUnits::pct, false);
        backLeft.rotateFor(revo, vex::rotationUnits::rev, s, vex::velocityUnits::pct, false);
        backRight.rotateFor(revo, vex::rotationUnits::rev, s, vex::velocityUnits::pct, true);
        //driveLock(true);
    }
    
  //turning without gyro - swing turns
    //left dist in inches - negative for backwards
    //right dist in inches
    //left speed in pct
    //right speed in pct
    void driveTurnFor(float leftdist, float rightddist, int leftSpeed, int rightSpeed){
        resetDrive();
        driveLock(true);
        float Lrevo = leftdist / (4 * math_Pi);
        float Rrevo = rightddist / (4 * math_Pi);
        frontLeft.rotateFor(Lrevo, vex::rotationUnits::rev, leftSpeed, vex::velocityUnits::pct, false);
        backLeft.rotateFor(Lrevo, vex::rotationUnits::rev, leftSpeed, vex::velocityUnits::pct, false);
        frontRight.rotateFor(Rrevo, vex::rotationUnits::rev, rightSpeed, vex::velocityUnits::pct, false);
        backRight.rotateFor(Rrevo, vex::rotationUnits::rev, rightSpeed, vex::velocityUnits::pct, true);
        driveLock(true);
    }

    //timeout drive for time
    void driveTimeout(float leftTime, float rightTime){
        frontLeft.setTimeout(leftTime, vex::timeUnits::sec);
        backLeft.setTimeout(leftTime, vex::timeUnits::sec);
        frontRight.setTimeout(rightTime, vex::timeUnits::sec);
        backRight.setTimeout(rightTime, vex::timeUnits::sec);
    }

void blueSmall(){
  //clear screen
  Brain.Screen.clearScreen();

  //set holds for auto movement
  angler.setStopping(vex::brakeType::hold);
  leftRoller.setStopping(vex::brakeType::hold);
  rightRoller.setStopping(vex::brakeType::hold);
  lift.setStopping(vex::brakeType::hold);

  //reset driveTrain encoders
  resetDrive();
  resetOthers();

  //drive forward while rollers flip out
  //angler rotates from 0 out
  angler.rotateTo(300,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
  startPid(7, 50, true);
  driveCoast();
  
  startPid(-4.5, 50, true);
  driveCoast();

  //lift moves up to deploy rollers (clear locks)
  lift.rotateTo(-550,vex::rotationUnits::deg,100,vex::velocityUnits::pct, true);

  lift.setStopping(vex::brakeType::coast);
  lift.rotateTo(-100,vex::rotationUnits::deg,75,vex::velocityUnits::pct, false);
  
  angler.rotateTo(0,vex::rotationUnits::deg,50,vex::velocityUnits::pct, true);
  leftRoller.spin(vex::directionType::fwd, (maxSpeed), vex::velocityUnits::pct);
  rightRoller.spin(vex::directionType::rev, (maxSpeed), vex::velocityUnits::pct);

  //drive forward while rollers flip out
  startPid(9, 60, true);
  startPid(27, 30, true);
  driveCoast();

  //leftRoller.spin(vex::directionType::fwd, (maxSpeed * 0.5), vex::velocityUnits::pct);
  //rightRoller.spin(vex::directionType::rev, (maxSpeed * 0.5), vex::velocityUnits::pct);

  leftRoller.spin(vex::directionType::fwd, (maxSpeed * 0.5), vex::velocityUnits::pct);
  rightRoller.spin(vex::directionType::rev, (maxSpeed * 0.5), vex::velocityUnits::pct);

  startPid(-16.5, 80, true);
  driveCoast();
  //stop rollers
  leftRoller.stop(vex::brakeType::hold);
  rightRoller.stop(vex::brakeType::hold);

  startTurn(-14.75, 70);
  driveCoast();
  //leftRoller.rotateFor(-150,vex::rotationUnits::deg, 50, vex::velocityUnits::pct, false);
  //rightRoller.rotateFor(150,vex::rotationUnits::deg, 50, vex::velocityUnits::pct, false);

  startPid(22, 60, true);
  driveCoast();
  angler.rotateTo(600,vex::rotationUnits::deg, 60, vex::velocityUnits::pct, false);
  //startPid(-2, 30, true);
  leftRoller.stop(vex::brakeType::coast);
  rightRoller.stop(vex::brakeType::coast);
  angler.rotateTo(1300,vex::rotationUnits::deg, 35, vex::velocityUnits::pct, true);
  startPid(1.5, 30, true);
  startPid(-7, 30, true);
  driveCoast();
}

void blueBig(){
//clear screen
  Brain.Screen.clearScreen();

  //set holds for auto movement
  angler.setStopping(vex::brakeType::hold);
  leftRoller.setStopping(vex::brakeType::hold);
  rightRoller.setStopping(vex::brakeType::hold);
  lift.setStopping(vex::brakeType::hold);

  //reset driveTrain encoders
  resetDrive();
  resetOthers();

  //drive forward while rollers flip out
  //angler rotates from 0 out
  angler.rotateTo(300,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
  startPid(7, 50, true);
  driveCoast();
  
  startPid(-4.5, 50, true);
  driveCoast();

  //lift moves up to deploy rollers (clear locks)
  lift.rotateTo(-550,vex::rotationUnits::deg,100,vex::velocityUnits::pct, true);

  lift.setStopping(vex::brakeType::coast);
  lift.rotateTo(-100,vex::rotationUnits::deg,75,vex::velocityUnits::pct, false);
  
  angler.rotateTo(0,vex::rotationUnits::deg,50,vex::velocityUnits::pct, true);
  leftRoller.spin(vex::directionType::fwd, (maxSpeed), vex::velocityUnits::pct);
  rightRoller.spin(vex::directionType::rev, (maxSpeed), vex::velocityUnits::pct);

  //drive forward while rollers flip out
  startPid(36, 45, true);
  driveCoast();

  leftRoller.spin(vex::directionType::fwd, (maxSpeed * 0.25), vex::velocityUnits::pct);
  rightRoller.spin(vex::directionType::rev, (maxSpeed * 0.25), vex::velocityUnits::pct);
  startTurn(15.25, 70);
  driveCoast();
  leftRoller.spin(vex::directionType::fwd, (maxSpeed), vex::velocityUnits::pct);
  rightRoller.spin(vex::directionType::rev, (maxSpeed), vex::velocityUnits::pct);
  startPid(40, 85, true);
  driveCoast();

  leftRoller.rotateFor(-400,vex::rotationUnits::deg, 75, vex::velocityUnits::pct, false);
  rightRoller.rotateFor(400,vex::rotationUnits::deg, 75, vex::velocityUnits::pct, true);
 
  angler.rotateTo(750,vex::rotationUnits::deg, 60, vex::velocityUnits::pct, true);
  angler.rotateTo(1300,vex::rotationUnits::deg, 35, vex::velocityUnits::pct, true);
  vex::task::sleep(250);
  startPid(-5, 20, true);
  driveCoast();
}

void redSmall(){
  //clear screen
  Brain.Screen.clearScreen();

  //set holds for auto movement
  angler.setStopping(vex::brakeType::hold);
  leftRoller.setStopping(vex::brakeType::hold);
  rightRoller.setStopping(vex::brakeType::hold);
  lift.setStopping(vex::brakeType::hold);

  //reset driveTrain encoders
  resetDrive();
  resetOthers();

  //drive forward while rollers flip out
  //angler rotates from 0 out
  angler.rotateTo(300,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
  startPid(7, 50, true);
  driveCoast();
  
  startPid(-4.5, 50, true);
  driveCoast();

  //lift moves up to deploy rollers (clear locks)
  lift.rotateTo(-550,vex::rotationUnits::deg,100,vex::velocityUnits::pct, true);

  lift.setStopping(vex::brakeType::coast);
  lift.rotateTo(-100,vex::rotationUnits::deg,75,vex::velocityUnits::pct, false);
  
  angler.rotateTo(0,vex::rotationUnits::deg,50,vex::velocityUnits::pct, true);
  leftRoller.spin(vex::directionType::fwd, (maxSpeed), vex::velocityUnits::pct);
  rightRoller.spin(vex::directionType::rev, (maxSpeed), vex::velocityUnits::pct);

  //drive forward while rollers flip out
  startPid(9, 60, true);
  startPid(27, 30, true);
  driveCoast();

  //leftRoller.spin(vex::directionType::fwd, (maxSpeed * 0.5), vex::velocityUnits::pct);
  //rightRoller.spin(vex::directionType::rev, (maxSpeed * 0.5), vex::velocityUnits::pct);

  leftRoller.spin(vex::directionType::fwd, (maxSpeed * 0.5), vex::velocityUnits::pct);
  rightRoller.spin(vex::directionType::rev, (maxSpeed * 0.5), vex::velocityUnits::pct);

  startPid(-15, 80, true);
  driveCoast();
  //stop rollers
  leftRoller.stop(vex::brakeType::hold);
  rightRoller.stop(vex::brakeType::hold);

  startTurn(15.25, 70);
  driveCoast();
  //leftRoller.rotateFor(-150,vex::rotationUnits::deg, 50, vex::velocityUnits::pct, false);
  //rightRoller.rotateFor(150,vex::rotationUnits::deg, 50, vex::velocityUnits::pct, false);

  

  startPid(22, 60, true);
  driveCoast();
  angler.rotateTo(600,vex::rotationUnits::deg, 60, vex::velocityUnits::pct, false);
  //startPid(-2, 30, true);
  angler.rotateTo(1300,vex::rotationUnits::deg, 35, vex::velocityUnits::pct, true);
  startPid(1, 30, true);
  startPid(-7, 30, true);
  driveCoast();
}


void redBig() {
  //clear screen
  Brain.Screen.clearScreen();

  //set holds for auto movement
  angler.setStopping(vex::brakeType::hold);
  leftRoller.setStopping(vex::brakeType::hold);
  rightRoller.setStopping(vex::brakeType::hold);
  lift.setStopping(vex::brakeType::hold);

  //reset driveTrain encoders
  resetDrive();
  resetOthers();

  //drive forward while rollers flip out
  //angler rotates from 0 out
  angler.rotateTo(300,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
  startPid(7, 50, true);
  driveCoast();
  
  startPid(-4.5, 50, true);
  driveCoast();

  //lift moves up to deploy rollers (clear locks)
  lift.rotateTo(-550,vex::rotationUnits::deg,100,vex::velocityUnits::pct, true);

  lift.setStopping(vex::brakeType::coast);
  lift.rotateTo(-100,vex::rotationUnits::deg,75,vex::velocityUnits::pct, false);
  
  angler.rotateTo(0,vex::rotationUnits::deg,50,vex::velocityUnits::pct, true);
  leftRoller.spin(vex::directionType::fwd, (maxSpeed), vex::velocityUnits::pct);
  rightRoller.spin(vex::directionType::rev, (maxSpeed), vex::velocityUnits::pct);

  //drive forward while rollers flip out
  startPid(36, 45, true);
  driveCoast();

  leftRoller.spin(vex::directionType::fwd, (maxSpeed * 0.25), vex::velocityUnits::pct);
  rightRoller.spin(vex::directionType::rev, (maxSpeed * 0.25), vex::velocityUnits::pct);
  startTurn(-15.25, 70);
  driveCoast();
  leftRoller.spin(vex::directionType::fwd, (maxSpeed), vex::velocityUnits::pct);
  rightRoller.spin(vex::directionType::rev, (maxSpeed), vex::velocityUnits::pct);
  startPid(40, 85, true);
  driveCoast();

  leftRoller.rotateFor(-300,vex::rotationUnits::deg, 50, vex::velocityUnits::pct, false);
  rightRoller.rotateFor(300,vex::rotationUnits::deg, 50, vex::velocityUnits::pct, true);
 
  angler.rotateTo(750,vex::rotationUnits::deg, 60, vex::velocityUnits::pct, true);
  angler.rotateTo(1300,vex::rotationUnits::deg, 35, vex::velocityUnits::pct, true);
  vex::task::sleep(250);
  startPid(-5, 20, true);
  driveCoast();
}

void autonomous(void) {
  vex::task pidTasks(pidTask);
  vex::task turnTasks(turnTask);
  autoRunning = true;
  //redSmall();
  //blueSmall();
  /*switch(autoPos){
    case 1:
      redSmall();
      Brain.Screen.printAt(1, 60, "Red Small");
      break;
    case 2:
      redBig();
      Brain.Screen.printAt(1, 60, "Red Big");
      break;
    case 3:
      blueSmall();
      Brain.Screen.printAt(1, 60, "Blue Small");
      break;
    case 4:
      blueBig();
      Brain.Screen.printAt(1, 60, "Blue Big");
      break;
  }
  */

  //stop pid task - only needed for auto
  vex::task::stop(pidTask); 
  vex::task::stop(turnTask); 
  autoRunning = false;
  //wait 10 seconds - just in case (no repeat)
  vex::task::sleep(10000);
}

void driveLockDetect(){
        if(Controller1.ButtonLeft.pressing()){
           //wait until released
           while(Controller1.ButtonLeft.pressing()){
               vex::task::sleep(100);
           }
           //run func
            driveLockOn = !driveLockOn;
           driveLock(driveLockOn);
       }
    }

    void straightDrive(){
      if(Controller1.ButtonUp.pressing()){
        straightMove = true;
        while(Controller1.ButtonUp.pressing()){
          moveLeft(20);
          moveRight(20);
        }
      }
      else if(Controller1.ButtonDown.pressing()){
        straightMove = true;
        while(Controller1.ButtonDown.pressing()){
          moveLeft(-20);
          moveRight(-20);
        }
      }
      straightMove = false;
    }

    /*
    void liftMovement(){
      if(liftTrigger){
        if(liftPos == 0){
          Brain.Screen.printAt(1, 120, "0");
          lift.rotateTo(0,vex::rotationUnits::deg,70,vex::velocityUnits::pct);
          lift.setTimeout(1000, vex::timeUnits::msec);
          angler.rotateTo(0,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
          angler.setTimeout(1000, vex::timeUnits::msec);
          anglerOut = false;
        }
        else if(liftPos == 1){
          anglerOut = true;
          Brain.Screen.printAt(1, 140, "1");
          angler.rotateTo(350,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
          if(Controller1.ButtonRight.pressing())
            lift.rotateTo(-610,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
          else
            lift.rotateTo(-715,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
        }
        else if(liftPos == 2){
          anglerOut = true;
          angler.rotateTo(350,vex::rotationUnits::deg,100,vex::velocityUnits::pct, false);
          if(Controller1.ButtonRight.pressing())
            lift.rotateTo(-740,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
          else
            lift.rotateTo(-875,vex::rotationUnits::deg,100,vex::velocityUnits::pct);
          Brain.Screen.printAt(1, 160, "2");
        }
        liftTrigger = false;
      }

      if(!liftTrigger && liftPos != 0)
        lift.stop(vex::brakeType::hold);
      else if(!liftTrigger && liftPos == 0)
        lift.stop(vex::brakeType::coast);

    }

    void liftTriggerDetect(){
      if(Controller1.ButtonB.pressing()){
           //wait until released
           while(Controller1.ButtonB.pressing()){
               vex::task::sleep(50);
           }
           //run func
            liftTrigger = true;
            if(liftPos < 2)
              liftPos = 1 - liftPos;
       }
       else if(Controller1.ButtonX.pressing()){
        //wait until released
           while(Controller1.ButtonX.pressing()){
               vex::task::sleep(75);
           }
           //run func
            liftTrigger = !liftTrigger;
            liftPos = 2 - liftPos;
       }
    }

int liftTask(){
  while(true){
    if(!autoRunning){
      liftMovement();
      liftTriggerDetect();
    }
    vex::task::sleep(20);
  }
return 0;
}
*/

int driveTask(){
  while(true){
    if(!autoRunning){
      driveLockDetect();
      straightDrive();
    }
    vex::task::sleep(20);
  }
  return 0;
    }

    void controllerDisplay(){
      Controller1.Screen.clearScreen();
        if(!driveLockOn){
          Controller1.Screen.setCursor(3, 1);
          Controller1.Screen.print("Off");
        }
        else
        {
          Controller1.Screen.setCursor(3, 1);
          Controller1.Screen.print("On");
        }    
    }

    void brainDisplay(){
        Brain.Screen.clearScreen();
        Brain.Screen.printAt(1, 40, "autoPos:");
        Brain.Screen.printAt(1, 60, "%d", autoPos);
    }

    //task only used to update brain and controller displays
    //also used to select auton's
    int displayTask(){
      while(true){
        if(!autoRunning){
          controllerDisplay();
          brainDisplay();
        }
          //to not waste resources - 150 cause display doesn't need to be updated super fast
          vex::task::sleep(150);
      }
      return 0;
    }

    void driveTrainControl(void){
      if(!straightMove){
        moveLeft(Controller1.Axis3.value() * driveFrac);
        moveRight(Controller1.Axis2.value() * driveFrac);
      }

      if(liftPos != 0)
        driveFrac = 0.5;
      else
        driveFrac = 1;
    }

    double anglerFrac;
    int aPos;
    void rollerControl(void){
      if((!Controller1.ButtonR1.pressing()) && (!Controller1.ButtonR2.pressing())){
        if(Controller1.ButtonL2.pressing()){
          leftRoller.spin(vex::directionType::fwd, (maxSpeed * rollerFrac), vex::velocityUnits::pct);
          rightRoller.spin(vex::directionType::rev, (maxSpeed * rollerFrac), vex::velocityUnits::pct);
        }
        else if(Controller1.ButtonL1.pressing()){
          leftRoller.spin(vex::directionType::rev, (maxSpeed * rollerFrac), vex::velocityUnits::pct);
          rightRoller.spin(vex::directionType::fwd, (maxSpeed * rollerFrac), vex::velocityUnits::pct);
        }
        else {
          if(aPos > 500){
            leftRoller.stop(vex::brakeType::coast);
              rightRoller.stop(vex::brakeType::coast);
          }
      else if(aPos < 500){
            leftRoller.stop(vex::brakeType::hold);
              rightRoller.stop(vex::brakeType::hold);
      }
          
          leftRoller.stop(vex::brakeType::hold);
          rightRoller.stop(vex::brakeType::hold);
          
        }
      }

      if(liftPos != 0)
        rollerFrac = 0.75;
      else
        rollerFrac = 1;
    }

    
    void anglerControl(){ 
      /*
      aPos = angler.rotation(vex::rotationUnits::deg);
      if(aPos > 500)
        anglerFrac = 0.25;
      else if(aPos < 500)
        anglerFrac = 0.6;
      */

      if(!anglerOut){
        if(Controller1.ButtonR1.pressing()){
          angler.spin(vex::directionType::fwd, (maxSpeed), vex::velocityUnits::pct);
        }
        else if(Controller1.ButtonR2.pressing()){
          angler.spin(vex::directionType::rev, (maxSpeed), vex::velocityUnits::pct);
        }
        else {
          if(aPos > 750)
            angler.stop(vex::brakeType::hold);
          else
            angler.stop(vex::brakeType::coast);
        }
      }
      else if(anglerOut && !liftTrigger){
        angler.stop(vex::brakeType::hold);
      }
    }
/*
    void autoSelector(){
      if(upLimit.pressing()){
        while(upLimit.pressing()){
               vex::task::sleep(50);
           }
           if(autoPos == autoMax)
            autoPos = 1;
           else
            autoPos++;
      }
      else if(downLimit.pressing()){
        while(downLimit.pressing()){
               vex::task::sleep(50);
           }
           if(autoPos == 1)
            autoPos = autoMax;
           else
            autoPos--;
      }
    }
    */
          
    void allRemoteFunc(void){
      if(!autoRunning){
        anglerControl(); 
        rollerControl();
        driveTrainControl();
        //autoSelector();
      }
    }

void usercontrol(void) {
  //turn off auto (just in case)
  autoRunning = false;

  //initiate task for triggers, like drive control 
  vex::task driveTriggers(driveTask);
  
  //initiate task for brain and controller displays
  vex::task display(displayTask);

  //initiate lift task
    //vex::task liftTriggers(liftTask);
  resetDrive();

  //stop auto tasks
  vex::task::stop(pidTask); 
  vex::task::stop(turnTask);

  while (true) {
    allRemoteFunc();
    wait(20, msec); // Sleep the task for a short amount of time to
  }
}

int main() {
  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);
  // Run the pre-autonomous function.
  pre_auton();
  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}
